#include<stdio.h>
#include<vector>
#include<queue>
#include<map>
#define INF 1000000
using namespace std;
typedef pair<int,int> P;
vector<int> e[100000];
int d[100000];
int bfr[100000][3][2];
bool exist[10000][3];

void djkstra(int n,int s){
	int i;
	for(i=0;i<n;i++){
		d[i]=INF;
		bfr[i][0][0]=-1;
		bfr[i][0][1]=-1;
		bfr[i][1][0]=-1;
		bfr[i][1][1]=-1;
		bfr[i][2][0]=-1;
		bfr[i][2][1]=-1;
		exist[i][0]=false;
		exist[i][1]=false;
		exist[i][2]=false;
	}
	d[s]=0;
	bfr[s][0][0]=n+1;
	priority_queue<P, vector<P> ,greater<P> > que;
	que.push(P(d[s],s));
	while(!que.empty()){
		P p=que.top();
		que.pop();
		int v=p.second;
		if(p.first==d[v]){
			for(i=0;i<e[v].size();i++){
				int u=e[v][i];
				if(d[v]+1<d[u]){
					d[u]=d[v]+1;
					bfr[u][0][0]=v;
					bfr[u][0][1]=-1;
					bfr[u][1][0]=-1;
					bfr[u][1][1]=-1;
					exist[u][0]=false;
					exist[u][1]=false;
					exist[u][2]=false;
					que.push(P(d[u],u));
				}
				else if(d[v]+1==d[u]){
					if(bfr[u][0][1]==-1)bfr[u][0][1]=v;
				}
				else if(d[v]+1==d[u]+1){
					bool f=false;
					f|=(bfr[u][0][0]!=bfr[v][0][0]);
					f|=(bfr[v][0][1]!=-1&&(bfr[u][0][0]!=bfr[v][0][1]));
					f|=(bfr[u][0][1]!=-1&&(bfr[u][0][1]!=bfr[v][0][0]));
					f|=(bfr[u][0][1]!=-1&&bfr[v][0][1]!=-1&&(bfr[u][0][1]!=bfr[v][0][1]));
					if(f){
						exist[u][2]=true;
						if(bfr[u][1][0]==-1){
							bfr[u][1][0]=v;
							que.push(P(d[u]+1,u));
						}
						else if(bfr[u][1][1]==-1){
							bfr[u][1][1]=v;
						}
					}else exist[u][0]=true;
				}
			}
		}
		if(p.first==d[v]+1){
			for(i=0;i<e[v].size();i++){
				int u=e[v][i];
				if(d[v]+2==d[u]+1){
					bool f=false;
					f|=(bfr[v][1][0]!=-1&&(bfr[u][0][0]!=bfr[v][1][0]));
					f|=(bfr[v][1][1]!=-1&&(bfr[u][0][0]!=bfr[v][1][1]));
					f|=(bfr[u][0][1]!=-1&&bfr[v][1][0]!=-1&&(bfr[u][0][1]!=bfr[v][1][0]));
					f|=(bfr[u][0][1]!=-1&&bfr[v][1][1]!=-1&&(bfr[u][0][1]!=bfr[v][1][1]));
					if(f){
						exist[u][2]=true;
						if(bfr[u][1][0]==-1){
							bfr[u][1][0]=v;
							que.push(P(d[u]+1,u));
						}
						else if(bfr[u][1][1]==-1){
							bfr[u][1][1]=v;
						}
					}else if(bfr[v][1][0]!=-1)exist[u][0]=true;
					if(exist[v][0])exist[u][1]=true;
					if(exist[v][1])exist[u][0]=true;
				}
			}
		}
	}
}

int main(){
	int n,m,k,a,b;
	int i;
	scanf("%d %d %d %d %d",&n,&m,&k,&a,&b);
	k--;
	for(i=0;i<m;i++){
		int p,q;
		scanf("%d %d",&p,&q);
		p--;q--;
		e[p].push_back(q);
		e[q].push_back(p);
	}
	djkstra(n,k);
	for(i=0;i<n;i++){
		int ans;
		int p=d[i]/2;
		int q=d[i]%2;
		printf("%d:%d %d\n",i+1,d[i],bfr[i][1][0]);
		if(b<a){
			if(q==1&&bfr[i][1][0]!=-1)ans=(p+1)*b;
			else ans=p*b+q*a;
		}
		else if(b<a*2)ans=p*b+q*a;
		else ans=d[i]*a;
		printf("%d\n",ans);
	}
	return 0;
}
